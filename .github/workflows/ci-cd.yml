name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test and Lint
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Lint backend
      run: |
        cd backend
        npm run lint || true

    - name: Lint frontend
      run: |
        cd frontend
        npm run lint

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Test backend
      run: |
        cd backend
        npm test || echo "No tests specified"

  # Security Scan
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security audit (backend)
      run: |
        cd backend
        npm audit --audit-level moderate || true

    - name: Run security audit (frontend)
      run: |
        cd frontend
        npm audit --audit-level moderate || true

  # Docker Build and Test
  docker-build:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create test environment file
      run: |
        cp .env.example .env

    - name: Build Docker images
      run: |
        docker compose build

    - name: Test Docker containers
      run: |
        docker compose up -d
        sleep 30
        # Test if services are running
        docker compose ps
        # Test if backend is responding
        timeout 60 bash -c 'until curl -f http://localhost/api/health 2>/dev/null; do sleep 2; done' || echo "Backend health check failed"
        docker compose down

  # Deploy to staging (on develop branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, security, docker-build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /path/to/staging/teamtask
          git pull origin develop
          docker compose down
          docker compose up -d --build
          echo "Staging deployment completed"

  # Deploy to production (on main branch)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, security, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        file: nginx.Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /path/to/production/teamtask
          git pull origin main
          docker compose down
          docker compose up -d --build
          echo "Production deployment completed"

  # Notify on deployment
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always() && env.SLACK_WEBHOOK != ''
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
